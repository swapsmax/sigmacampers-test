{
  "version": 3,
  "sources": ["../../next/src/shared/lib/app-router-context.shared-runtime.ts", "../../next/src/shared/lib/hooks-client-context.shared-runtime.ts", "../../next/src/client/components/router-reducer/reducers/get-segment-value.ts", "../../next/src/server/app-render/async-local-storage.ts", "../../next/src/server/app-render/action-async-storage-instance.ts", "../../next/src/server/app-render/action-async-storage.external.ts", "../../next/src/client/components/redirect-status-code.ts", "../../next/src/client/components/redirect-error.ts", "../../next/src/client/components/redirect.ts", "../../next/src/client/components/http-access-fallback/http-access-fallback.ts", "../../next/src/client/components/not-found.ts", "../../next/src/client/components/forbidden.ts", "../../next/src/client/components/unauthorized.ts", "../../next/src/client/components/hooks-server-context.ts", "../../next/src/shared/lib/lazy-dynamic/bailout-to-csr.ts", "../../next/src/client/components/is-next-router-error.ts", "../../next/src/client/components/static-generation-bailout.ts", "../../next/src/server/app-render/work-unit-async-storage-instance.ts", "../../next/src/server/app-render/work-unit-async-storage.external.ts", "../../next/src/server/app-render/work-async-storage-instance.ts", "../../next/src/server/app-render/work-async-storage.external.ts", "../../next/src/server/dynamic-rendering-utils.ts", "../../next/src/lib/metadata/metadata-constants.tsx", "../../next/src/server/app-render/dynamic-rendering.ts", "../../next/src/export/helpers/is-dynamic-usage-error.ts", "../../next/src/server/lib/router-utils/is-postpone.ts", "../../next/src/client/components/unstable-rethrow.ts", "../../next/src/client/components/navigation.react-server.ts", "../../next/src/shared/lib/server-inserted-html.shared-runtime.tsx", "../../next/src/client/components/bailout-to-client-rendering.ts", "../../next/src/client/components/navigation.ts", "../../next/navigation.js"],
  "sourcesContent": ["'use client'\n\nimport type { FetchServerResponseResult } from '../../client/components/router-reducer/fetch-server-response'\nimport type {\n  FocusAndScrollRef,\n  PrefetchKind,\n  RouterChangeByServerResponse,\n} from '../../client/components/router-reducer/router-reducer-types'\nimport type { FlightRouterState } from '../../server/app-render/types'\nimport React from 'react'\n\nexport type ChildSegmentMap = Map<string, CacheNode>\n\n/**\n * Cache node used in app-router / layout-router.\n */\nexport type CacheNode = ReadyCacheNode | LazyCacheNode\n\nexport type LoadingModuleData =\n  | [React.JSX.Element, React.ReactNode, React.ReactNode]\n  | null\n\nexport type LazyCacheNode = {\n  /**\n   * When rsc is null, this is a lazily-initialized cache node.\n   *\n   * If the app attempts to render it, it triggers a lazy data fetch,\n   * postpones the render, and schedules an update to a new tree.\n   *\n   * TODO: This mechanism should not be used when PPR is enabled, though it\n   * currently is in some cases until we've implemented partial\n   * segment fetching.\n   */\n  rsc: null\n\n  /**\n   * A prefetched version of the segment data. See explanation in corresponding\n   * field of ReadyCacheNode (below).\n   *\n   * Since LazyCacheNode mostly only exists in the non-PPR implementation, this\n   * will usually be null, but it could have been cloned from a previous\n   * CacheNode that was created by the PPR implementation. Eventually we want\n   * to migrate everything away from LazyCacheNode entirely.\n   */\n  prefetchRsc: React.ReactNode\n\n  /**\n   * A pending response for the lazy data fetch. If this is not present\n   * during render, it is lazily created.\n   */\n  lazyData: Promise<FetchServerResponseResult> | null\n\n  prefetchHead: React.ReactNode\n  head: React.ReactNode\n\n  loading: LoadingModuleData | Promise<LoadingModuleData>\n\n  /**\n   * Child parallel routes.\n   */\n  parallelRoutes: Map<string, ChildSegmentMap>\n}\n\nexport type ReadyCacheNode = {\n  /**\n   * When rsc is not null, it represents the RSC data for the\n   * corresponding segment.\n   *\n   * `null` is a valid React Node but because segment data is always a\n   * <LayoutRouter> component, we can use `null` to represent empty.\n   *\n   * TODO: For additional type safety, update this type to\n   * Exclude<React.ReactNode, null>. Need to update createEmptyCacheNode to\n   * accept rsc as an argument, or just inline the callers.\n   */\n  rsc: React.ReactNode\n\n  /**\n   * Represents a static version of the segment that can be shown immediately,\n   * and may or may not contain dynamic holes. It's prefetched before a\n   * navigation occurs.\n   *\n   * During rendering, we will choose whether to render `rsc` or `prefetchRsc`\n   * with `useDeferredValue`. As with the `rsc` field, a value of `null` means\n   * no value was provided. In this case, the LayoutRouter will go straight to\n   * rendering the `rsc` value; if that one is also missing, it will suspend and\n   * trigger a lazy fetch.\n   */\n  prefetchRsc: React.ReactNode\n\n  /**\n   * There should never be a lazy data request in this case.\n   */\n  lazyData: null\n  prefetchHead: React.ReactNode\n  head: React.ReactNode\n\n  loading: LoadingModuleData | Promise<LoadingModuleData>\n\n  parallelRoutes: Map<string, ChildSegmentMap>\n}\n\nexport interface NavigateOptions {\n  scroll?: boolean\n}\n\nexport interface PrefetchOptions {\n  kind: PrefetchKind\n}\n\nexport interface AppRouterInstance {\n  /**\n   * Navigate to the previous history entry.\n   */\n  back(): void\n  /**\n   * Navigate to the next history entry.\n   */\n  forward(): void\n  /**\n   * Refresh the current page.\n   */\n  refresh(): void\n  /**\n   * Refresh the current page. Use in development only.\n   * @internal\n   */\n  hmrRefresh(): void\n  /**\n   * Navigate to the provided href.\n   * Pushes a new history entry.\n   */\n  push(href: string, options?: NavigateOptions): void\n  /**\n   * Navigate to the provided href.\n   * Replaces the current history entry.\n   */\n  replace(href: string, options?: NavigateOptions): void\n  /**\n   * Prefetch the provided href.\n   */\n  prefetch(href: string, options?: PrefetchOptions): void\n}\n\nexport const AppRouterContext = React.createContext<AppRouterInstance | null>(\n  null\n)\nexport const LayoutRouterContext = React.createContext<{\n  childNodes: CacheNode['parallelRoutes']\n  tree: FlightRouterState\n  url: string\n  loading: LoadingModuleData | Promise<LoadingModuleData>\n} | null>(null)\n\nexport const GlobalLayoutRouterContext = React.createContext<{\n  tree: FlightRouterState\n  changeByServerResponse: RouterChangeByServerResponse\n  focusAndScrollRef: FocusAndScrollRef\n  nextUrl: string | null\n}>(null as any)\n\nexport const TemplateContext = React.createContext<React.ReactNode>(null as any)\n\nif (process.env.NODE_ENV !== 'production') {\n  AppRouterContext.displayName = 'AppRouterContext'\n  LayoutRouterContext.displayName = 'LayoutRouterContext'\n  GlobalLayoutRouterContext.displayName = 'GlobalLayoutRouterContext'\n  TemplateContext.displayName = 'TemplateContext'\n}\n\nexport const MissingSlotContext = React.createContext<Set<string>>(new Set())\n", "'use client'\n\nimport { createContext } from 'react'\nimport type { Params } from '../../server/request/params'\n\nexport const SearchParamsContext = createContext<URLSearchParams | null>(null)\nexport const PathnameContext = createContext<string | null>(null)\nexport const PathParamsContext = createContext<Params | null>(null)\n\nif (process.env.NODE_ENV !== 'production') {\n  SearchParamsContext.displayName = 'SearchParamsContext'\n  PathnameContext.displayName = 'PathnameContext'\n  PathParamsContext.displayName = 'PathParamsContext'\n}\n", "import type { Segment } from '../../../../server/app-render/types'\n\nexport function getSegmentValue(segment: Segment) {\n  return Array.isArray(segment) ? segment[1] : segment\n}\n", "import type { AsyncLocalStorage } from 'async_hooks'\n\nconst sharedAsyncLocalStorageNotAvailableError = new Error(\n  'Invariant: AsyncLocalStorage accessed in runtime where it is not available'\n)\n\nclass FakeAsyncLocalStorage<Store extends {}>\n  implements AsyncLocalStorage<Store>\n{\n  disable(): void {\n    throw sharedAsyncLocalStorageNotAvailableError\n  }\n\n  getStore(): Store | undefined {\n    // This fake implementation of AsyncLocalStorage always returns `undefined`.\n    return undefined\n  }\n\n  run<R>(): R {\n    throw sharedAsyncLocalStorageNotAvailableError\n  }\n\n  exit<R>(): R {\n    throw sharedAsyncLocalStorageNotAvailableError\n  }\n\n  enterWith(): void {\n    throw sharedAsyncLocalStorageNotAvailableError\n  }\n\n  static bind<T>(fn: T): T {\n    return fn\n  }\n}\n\nconst maybeGlobalAsyncLocalStorage =\n  typeof globalThis !== 'undefined' && (globalThis as any).AsyncLocalStorage\n\nexport function createAsyncLocalStorage<\n  Store extends {},\n>(): AsyncLocalStorage<Store> {\n  if (maybeGlobalAsyncLocalStorage) {\n    return new maybeGlobalAsyncLocalStorage()\n  }\n  return new FakeAsyncLocalStorage()\n}\n\nexport function bindSnapshot<T>(fn: T): T {\n  if (maybeGlobalAsyncLocalStorage) {\n    return maybeGlobalAsyncLocalStorage.bind(fn)\n  }\n  return FakeAsyncLocalStorage.bind(fn)\n}\n\nexport function createSnapshot(): <R, TArgs extends any[]>(\n  fn: (...args: TArgs) => R,\n  ...args: TArgs\n) => R {\n  if (maybeGlobalAsyncLocalStorage) {\n    return maybeGlobalAsyncLocalStorage.snapshot()\n  }\n  return function (fn: any, ...args: any[]) {\n    return fn(...args)\n  }\n}\n", "import type { ActionAsyncStorage } from './action-async-storage.external'\nimport { createAsyncLocalStorage } from './async-local-storage'\n\nexport const actionAsyncStorageInstance: ActionAsyncStorage =\n  createAsyncLocalStorage()\n", "import type { AsyncLocalStorage } from 'async_hooks'\n\n// Share the instance module in the next-shared layer\nimport { actionAsyncStorageInstance } from './action-async-storage-instance' with { 'turbopack-transition': 'next-shared' }\nexport interface ActionStore {\n  readonly isAction?: boolean\n  readonly isAppRoute?: boolean\n}\n\nexport type ActionAsyncStorage = AsyncLocalStorage<ActionStore>\n\nexport { actionAsyncStorageInstance as actionAsyncStorage }\n", "export enum RedirectStatusCode {\n  SeeOther = 303,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n}\n", "import { RedirectStatusCode } from './redirect-status-code'\n\nexport const REDIRECT_ERROR_CODE = 'NEXT_REDIRECT'\n\nexport enum RedirectType {\n  push = 'push',\n  replace = 'replace',\n}\n\nexport type RedirectError = Error & {\n  digest: `${typeof REDIRECT_ERROR_CODE};${RedirectType};${string};${RedirectStatusCode};`\n}\n\n/**\n * Checks an error to determine if it's an error generated by the\n * `redirect(url)` helper.\n *\n * @param error the error that may reference a redirect error\n * @returns true if the error is a redirect error\n */\nexport function isRedirectError(error: unknown): error is RedirectError {\n  if (\n    typeof error !== 'object' ||\n    error === null ||\n    !('digest' in error) ||\n    typeof error.digest !== 'string'\n  ) {\n    return false\n  }\n\n  const digest = error.digest.split(';')\n  const [errorCode, type] = digest\n  const destination = digest.slice(2, -2).join(';')\n  const status = digest.at(-2)\n\n  const statusCode = Number(status)\n\n  return (\n    errorCode === REDIRECT_ERROR_CODE &&\n    (type === 'replace' || type === 'push') &&\n    typeof destination === 'string' &&\n    !isNaN(statusCode) &&\n    statusCode in RedirectStatusCode\n  )\n}\n", "import { actionAsyncStorage } from '../../server/app-render/action-async-storage.external'\nimport { RedirectStatusCode } from './redirect-status-code'\nimport {\n  RedirectType,\n  type RedirectError,\n  isRedirectError,\n  REDIRECT_ERROR_CODE,\n} from './redirect-error'\n\nexport function getRedirectError(\n  url: string,\n  type: RedirectType,\n  statusCode: RedirectStatusCode = RedirectStatusCode.TemporaryRedirect\n): RedirectError {\n  const error = new Error(REDIRECT_ERROR_CODE) as RedirectError\n  error.digest = `${REDIRECT_ERROR_CODE};${type};${url};${statusCode};`\n  return error\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 307/303 to the caller.\n * - In a Server Action, type defaults to 'push' and 'replace' elsewhere.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function redirect(\n  /** The URL to redirect to */\n  url: string,\n  type?: RedirectType\n): never {\n  const actionStore = actionAsyncStorage.getStore()\n  const redirectType =\n    type || (actionStore?.isAction ? RedirectType.push : RedirectType.replace)\n  throw getRedirectError(\n    url,\n    redirectType,\n    RedirectStatusCode.TemporaryRedirect\n  )\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 308/303 to the caller.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function permanentRedirect(\n  /** The URL to redirect to */\n  url: string,\n  type: RedirectType = RedirectType.replace\n): never {\n  throw getRedirectError(url, type, RedirectStatusCode.PermanentRedirect)\n}\n\n/**\n * Returns the encoded URL from the error if it's a RedirectError, null\n * otherwise. Note that this does not validate the URL returned.\n *\n * @param error the error that may be a redirect error\n * @return the url if the error was a redirect error\n */\nexport function getURLFromRedirectError(error: RedirectError): string\nexport function getURLFromRedirectError(error: unknown): string | null {\n  if (!isRedirectError(error)) return null\n\n  // Slices off the beginning of the digest that contains the code and the\n  // separating ';'.\n  return error.digest.split(';').slice(2, -2).join(';')\n}\n\nexport function getRedirectTypeFromError(error: RedirectError): RedirectType {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return error.digest.split(';', 2)[1] as RedirectType\n}\n\nexport function getRedirectStatusCodeFromError(error: RedirectError): number {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return Number(error.digest.split(';').at(-2))\n}\n", "export const HTTPAccessErrorStatus = {\n  NOT_FOUND: 404,\n  FORBIDDEN: 403,\n  UNAUTHORIZED: 401,\n}\n\nconst ALLOWED_CODES = new Set(Object.values(HTTPAccessErrorStatus))\n\nexport const HTTP_ERROR_FALLBACK_ERROR_CODE = 'NEXT_HTTP_ERROR_FALLBACK'\n\nexport type HTTPAccessFallbackError = Error & {\n  digest: `${typeof HTTP_ERROR_FALLBACK_ERROR_CODE};${string}`\n}\n\n/**\n * Checks an error to determine if it's an error generated by\n * the HTTP navigation APIs `notFound()`, `forbidden()` or `unauthorized()`.\n *\n * @param error the error that may reference a HTTP access error\n * @returns true if the error is a HTTP access error\n */\nexport function isHTTPAccessFallbackError(\n  error: unknown\n): error is HTTPAccessFallbackError {\n  if (\n    typeof error !== 'object' ||\n    error === null ||\n    !('digest' in error) ||\n    typeof error.digest !== 'string'\n  ) {\n    return false\n  }\n  const [prefix, httpStatus] = error.digest.split(';')\n\n  return (\n    prefix === HTTP_ERROR_FALLBACK_ERROR_CODE &&\n    ALLOWED_CODES.has(Number(httpStatus))\n  )\n}\n\nexport function getAccessFallbackHTTPStatus(\n  error: HTTPAccessFallbackError\n): number {\n  const httpStatus = error.digest.split(';')[1]\n  return Number(httpStatus)\n}\n\nexport function getAccessFallbackErrorTypeByStatus(\n  status: number\n): 'not-found' | 'forbidden' | 'unauthorized' | undefined {\n  switch (status) {\n    case 401:\n      return 'unauthorized'\n    case 403:\n      return 'forbidden'\n    case 404:\n      return 'not-found'\n    default:\n      return\n  }\n}\n", "import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n/**\n * This function allows you to render the [not-found.js file](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)\n * within a route segment as well as inject a tag.\n *\n * `notFound()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a `<meta name=\"robots\" content=\"noindex\" />` meta tag and set the status code to 404.\n * - In a Route Handler or Server Action, it will serve a 404 to the caller.\n *\n * Read more: [Next.js Docs: `notFound`](https://nextjs.org/docs/app/api-reference/functions/not-found)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};404`\n\nexport function notFound(): never {\n  // eslint-disable-next-line no-throw-literal\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n\n  throw error\n}\n", "import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n// TODO: Add `forbidden` docs\n/**\n * @experimental\n * This function allows you to render the [forbidden.js file](https://nextjs.org/docs/app/api-reference/file-conventions/forbidden)\n * within a route segment as well as inject a tag.\n *\n * `forbidden()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * Read more: [Next.js Docs: `forbidden`](https://nextjs.org/docs/app/api-reference/functions/forbidden)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};403`\n\nexport function forbidden(): never {\n  if (!process.env.__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS) {\n    throw new Error(\n      `\\`forbidden()\\` is experimental and only allowed to be enabled when \\`experimental.authInterrupts\\` is enabled.`\n    )\n  }\n\n  // eslint-disable-next-line no-throw-literal\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n  throw error\n}\n", "import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n// TODO: Add `unauthorized` docs\n/**\n * @experimental\n * This function allows you to render the [unauthorized.js file](https://nextjs.org/docs/app/api-reference/file-conventions/unauthorized)\n * within a route segment as well as inject a tag.\n *\n * `unauthorized()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n *\n * Read more: [Next.js Docs: `unauthorized`](https://nextjs.org/docs/app/api-reference/functions/unauthorized)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};401`\n\nexport function unauthorized(): never {\n  if (!process.env.__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS) {\n    throw new Error(\n      `\\`unauthorized()\\` is experimental and only allowed to be used when \\`experimental.authInterrupts\\` is enabled.`\n    )\n  }\n\n  // eslint-disable-next-line no-throw-literal\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n  throw error\n}\n", "const DYNAMIC_ERROR_CODE = 'DYNAMIC_SERVER_USAGE'\n\nexport class DynamicServerError extends Error {\n  digest: typeof DYNAMIC_ERROR_CODE = DYNAMIC_ERROR_CODE\n\n  constructor(public readonly description: string) {\n    super(`Dynamic server usage: ${description}`)\n  }\n}\n\nexport function isDynamicServerError(err: unknown): err is DynamicServerError {\n  if (\n    typeof err !== 'object' ||\n    err === null ||\n    !('digest' in err) ||\n    typeof err.digest !== 'string'\n  ) {\n    return false\n  }\n\n  return err.digest === DYNAMIC_ERROR_CODE\n}\n", "// This has to be a shared module which is shared between client component error boundary and dynamic component\nconst BAILOUT_TO_CSR = 'BAILOUT_TO_CLIENT_SIDE_RENDERING'\n\n/** An error that should be thrown when we want to bail out to client-side rendering. */\nexport class BailoutToCSRError extends Error {\n  public readonly digest = BAILOUT_TO_CSR\n\n  constructor(public readonly reason: string) {\n    super(`Bail out to client-side rendering: ${reason}`)\n  }\n}\n\n/** Checks if a passed argument is an error that is thrown if we want to bail out to client-side rendering. */\nexport function isBailoutToCSRError(err: unknown): err is BailoutToCSRError {\n  if (typeof err !== 'object' || err === null || !('digest' in err)) {\n    return false\n  }\n\n  return err.digest === BAILOUT_TO_CSR\n}\n", "import {\n  isHTTPAccessFallbackError,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\nimport { isRedirectError, type RedirectError } from './redirect-error'\n\n/**\n * Returns true if the error is a navigation signal error. These errors are\n * thrown by user code to perform navigation operations and interrupt the React\n * render.\n */\nexport function isNextRouterError(\n  error: unknown\n): error is RedirectError | HTTPAccessFallbackError {\n  return isRedirectError(error) || isHTTPAccessFallbackError(error)\n}\n", "const NEXT_STATIC_GEN_BAILOUT = 'NEXT_STATIC_GEN_BAILOUT'\n\nexport class StaticGenBailoutError extends Error {\n  public readonly code = NEXT_STATIC_GEN_BAILOUT\n}\n\nexport function isStaticGenBailoutError(\n  error: unknown\n): error is StaticGenBailoutError {\n  if (typeof error !== 'object' || error === null || !('code' in error)) {\n    return false\n  }\n\n  return error.code === NEXT_STATIC_GEN_BAILOUT\n}\n", "import { createAsyncLocalStorage } from './async-local-storage'\nimport type { WorkUnitAsyncStorage } from './work-unit-async-storage.external'\n\nexport const workUnitAsyncStorageInstance: WorkUnitAsyncStorage =\n  createAsyncLocalStorage()\n", "import type { AsyncLocalStorage } from 'async_hooks'\nimport type { DraftModeProvider } from '../async-storage/draft-mode-provider'\nimport type { ResponseCookies } from '../web/spec-extension/cookies'\nimport type { ReadonlyHeaders } from '../web/spec-extension/adapters/headers'\nimport type { ReadonlyRequestCookies } from '../web/spec-extension/adapters/request-cookies'\nimport type { CacheSignal } from './cache-signal'\nimport type { DynamicTrackingState } from './dynamic-rendering'\n\n// Share the instance module in the next-shared layer\nimport { workUnitAsyncStorageInstance } from './work-unit-async-storage-instance' with { 'turbopack-transition': 'next-shared' }\nimport type { ServerComponentsHmrCache } from '../response-cache'\nimport type {\n  RenderResumeDataCache,\n  PrerenderResumeDataCache,\n} from '../resume-data-cache/resume-data-cache'\n\ntype WorkUnitPhase = 'action' | 'render' | 'after'\n\ntype PhasePartial = {\n  /** NOTE: Will be mutated as phases change */\n  phase: WorkUnitPhase\n}\n\nexport type RequestStore = {\n  type: 'request'\n\n  /**\n   * The URL of the request. This only specifies the pathname and the search\n   * part of the URL.\n   */\n  readonly url: {\n    /**\n     * The pathname of the requested URL.\n     */\n    readonly pathname: string\n\n    /**\n     * The search part of the requested URL. If the request did not provide a\n     * search part, this will be an empty string.\n     */\n    readonly search: string\n  }\n\n  readonly headers: ReadonlyHeaders\n  // This is mutable because we need to reassign it when transitioning from the action phase to the render phase.\n  // The cookie object itself is deliberately read only and thus can't be updated.\n  cookies: ReadonlyRequestCookies\n  readonly mutableCookies: ResponseCookies\n  readonly userspaceMutableCookies: ResponseCookies\n  readonly draftMode: DraftModeProvider\n  readonly isHmrRefresh?: boolean\n  readonly serverComponentsHmrCache?: ServerComponentsHmrCache\n\n  readonly implicitTags: string[]\n\n  /**\n   * The resume data cache for this request. This will be a immutable cache.\n   */\n  renderResumeDataCache: RenderResumeDataCache | null\n\n  // DEV-only\n  usedDynamic?: boolean\n  prerenderPhase?: boolean\n} & PhasePartial\n\n/**\n * The Prerender store is for tracking information related to prerenders.\n *\n * It can be used for both RSC and SSR prerendering and should be scoped as close\n * to the individual `renderTo...` API call as possible. To keep the type simple\n * we don't distinguish between RSC and SSR prerendering explicitly but instead\n * use conditional object properties to infer which mode we are in. For instance cache tracking\n * only needs to happen during the RSC prerender when we are prospectively prerendering\n * to fill all caches.\n */\nexport type PrerenderStoreModern = {\n  type: 'prerender'\n  readonly implicitTags: string[]\n\n  /**\n   * This signal is aborted when the React render is complete. (i.e. it is the same signal passed to react)\n   */\n  readonly renderSignal: AbortSignal\n  /**\n   * This is the AbortController which represents the boundary between Prerender and dynamic. In some renders it is\n   * the same as the controller for the renderSignal but in others it is a separate controller. It should be aborted\n   * whenever the we are no longer in the prerender phase of rendering. Typically this is after one task or when you call\n   * a sync API which requires the prerender to end immediately\n   */\n  readonly controller: AbortController\n\n  /**\n   * when not null this signal is used to track cache reads during prerendering and\n   * to await all cache reads completing before aborting the prerender.\n   */\n  readonly cacheSignal: null | CacheSignal\n\n  /**\n   * During some prerenders we want to track dynamic access.\n   */\n  readonly dynamicTracking: null | DynamicTrackingState\n\n  // Collected revalidate times and tags for this document during the prerender.\n  revalidate: number // in seconds. 0 means dynamic. INFINITE_CACHE and higher means never revalidate.\n  expire: number // server expiration time\n  stale: number // client expiration time\n  tags: null | string[]\n\n  /**\n   * The resume data cache for this prerender.\n   */\n  prerenderResumeDataCache: PrerenderResumeDataCache | null\n\n  // DEV ONLY\n  // When used this flag informs certain APIs to skip logging because we're\n  // not part of the primary render path and are just prerendering to produce\n  // validation results\n  validating?: boolean\n} & PhasePartial\n\nexport type PrerenderStorePPR = {\n  type: 'prerender-ppr'\n  readonly implicitTags: string[]\n  readonly dynamicTracking: null | DynamicTrackingState\n  // Collected revalidate times and tags for this document during the prerender.\n  revalidate: number // in seconds. 0 means dynamic. INFINITE_CACHE and higher means never revalidate.\n  expire: number // server expiration time\n  stale: number // client expiration time\n  tags: null | string[]\n\n  /**\n   * The resume data cache for this prerender.\n   */\n  prerenderResumeDataCache: PrerenderResumeDataCache\n} & PhasePartial\n\nexport type PrerenderStoreLegacy = {\n  type: 'prerender-legacy'\n  readonly implicitTags: string[]\n  // Collected revalidate times and tags for this document during the prerender.\n  revalidate: number // in seconds. 0 means dynamic. INFINITE_CACHE and higher means never revalidate.\n  expire: number // server expiration time\n  stale: number // client expiration time\n  tags: null | string[]\n} & PhasePartial\n\nexport type PrerenderStore =\n  | PrerenderStoreLegacy\n  | PrerenderStorePPR\n  | PrerenderStoreModern\n\nexport type UseCacheStore = {\n  type: 'cache'\n  readonly implicitTags: string[]\n  // Collected revalidate times and tags for this cache entry during the cache render.\n  revalidate: number // implicit revalidate time from inner caches / fetches\n  expire: number // server expiration time\n  stale: number // client expiration time\n  explicitRevalidate: undefined | number // explicit revalidate time from cacheLife() calls\n  explicitExpire: undefined | number // server expiration time\n  explicitStale: undefined | number // client expiration time\n  tags: null | string[]\n} & PhasePartial\n\nexport type UnstableCacheStore = {\n  type: 'unstable-cache'\n} & PhasePartial\n\n/**\n * The Cache store is for tracking information inside a \"use cache\" or unstable_cache context.\n * Inside this context we should never expose any request or page specific information.\n */\nexport type CacheStore = UseCacheStore | UnstableCacheStore\n\nexport type WorkUnitStore = RequestStore | CacheStore | PrerenderStore\n\nexport type WorkUnitAsyncStorage = AsyncLocalStorage<WorkUnitStore>\n\nexport { workUnitAsyncStorageInstance as workUnitAsyncStorage }\n\nexport function getExpectedRequestStore(\n  callingExpression: string\n): RequestStore {\n  const workUnitStore = workUnitAsyncStorageInstance.getStore()\n  if (workUnitStore) {\n    if (workUnitStore.type === 'request') {\n      return workUnitStore\n    }\n    if (\n      workUnitStore.type === 'prerender' ||\n      workUnitStore.type === 'prerender-ppr' ||\n      workUnitStore.type === 'prerender-legacy'\n    ) {\n      // This should not happen because we should have checked it already.\n      throw new Error(\n        `\\`${callingExpression}\\` cannot be called inside a prerender. This is a bug in Next.js.`\n      )\n    }\n    if (workUnitStore.type === 'cache') {\n      throw new Error(\n        `\\`${callingExpression}\\` cannot be called inside \"use cache\". Call it outside and pass an argument instead. Read more: https://nextjs.org/docs/messages/next-request-in-use-cache`\n      )\n    } else if (workUnitStore.type === 'unstable-cache') {\n      throw new Error(\n        `\\`${callingExpression}\\` cannot be called inside unstable_cache. Call it outside and pass an argument instead. Read more: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`\n      )\n    }\n  }\n  throw new Error(\n    `\\`${callingExpression}\\` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context`\n  )\n}\n\nexport function getPrerenderResumeDataCache(\n  workUnitStore: WorkUnitStore\n): PrerenderResumeDataCache | null {\n  if (\n    workUnitStore.type === 'prerender' ||\n    workUnitStore.type === 'prerender-ppr'\n  ) {\n    return workUnitStore.prerenderResumeDataCache\n  }\n\n  return null\n}\n\nexport function getRenderResumeDataCache(\n  workUnitStore: WorkUnitStore\n): RenderResumeDataCache | null {\n  if (\n    workUnitStore.type !== 'prerender-legacy' &&\n    workUnitStore.type !== 'cache' &&\n    workUnitStore.type !== 'unstable-cache'\n  ) {\n    if (workUnitStore.type === 'request') {\n      return workUnitStore.renderResumeDataCache\n    }\n\n    // We return the mutable resume data cache here as an immutable version of\n    // the cache as it can also be used for reading.\n    return workUnitStore.prerenderResumeDataCache\n  }\n\n  return null\n}\n", "import type { WorkAsyncStorage } from './work-async-storage.external'\nimport { createAsyncLocalStorage } from './async-local-storage'\n\nexport const workAsyncStorageInstance: WorkAsyncStorage =\n  createAsyncLocalStorage()\n", "import type { AsyncLocalStorage } from 'async_hooks'\nimport type { IncrementalCache } from '../lib/incremental-cache'\nimport type { DynamicServerError } from '../../client/components/hooks-server-context'\nimport type { FetchMetrics } from '../base-http'\nimport type { FallbackRouteParams } from '../request/fallback-params'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport type { AppSegmentConfig } from '../../build/segment-config/app/app-segment-config'\nimport type { AfterContext } from '../after/after-context'\nimport type { CacheLife } from '../use-cache/cache-life'\n\n// Share the instance module in the next-shared layer\nimport { workAsyncStorageInstance } from './work-async-storage-instance' with { 'turbopack-transition': 'next-shared' }\n\nexport interface WorkStore {\n  readonly isStaticGeneration: boolean\n\n  /**\n   * The page that is being rendered. This relates to the path to the page file.\n   */\n  readonly page: string\n\n  /**\n   * The route that is being rendered. This is the page property without the\n   * trailing `/page` or `/route` suffix.\n   */\n  readonly route: string\n\n  /**\n   * The set of unknown route parameters. Accessing these will be tracked as\n   * a dynamic access.\n   */\n  readonly fallbackRouteParams: FallbackRouteParams | null\n\n  readonly incrementalCache?: IncrementalCache\n  readonly cacheLifeProfiles?: { [profile: string]: CacheLife }\n\n  readonly isOnDemandRevalidate?: boolean\n  readonly isPrerendering?: boolean\n  readonly isRevalidate?: boolean\n\n  forceDynamic?: boolean\n  fetchCache?: AppSegmentConfig['fetchCache']\n\n  forceStatic?: boolean\n  dynamicShouldError?: boolean\n  pendingRevalidates?: Record<string, Promise<any>>\n  pendingRevalidateWrites?: Array<Promise<void>> // This is like pendingRevalidates but isn't used for deduping.\n  readonly afterContext: AfterContext\n\n  dynamicUsageDescription?: string\n  dynamicUsageStack?: string\n  dynamicUsageErr?: DynamicServerError\n\n  nextFetchId?: number\n  pathWasRevalidated?: boolean\n\n  revalidatedTags?: string[]\n  fetchMetrics?: FetchMetrics\n\n  isDraftMode?: boolean\n  isUnstableNoStore?: boolean\n  isPrefetchRequest?: boolean\n\n  requestEndedState?: { ended?: boolean }\n\n  buildId: string\n\n  readonly reactLoadableManifest?: DeepReadonly<\n    Record<string, { files: string[] }>\n  >\n  readonly assetPrefix?: string\n}\n\nexport type WorkAsyncStorage = AsyncLocalStorage<WorkStore>\n\nexport { workAsyncStorageInstance as workAsyncStorage }\n", "/**\n * This function constructs a promise that will never resolve. This is primarily\n * useful for dynamicIO where we use promise resolution timing to determine which\n * parts of a render can be included in a prerender.\n *\n * @internal\n */\nexport function makeHangingPromise<T>(\n  signal: AbortSignal,\n  expression: string\n): Promise<T> {\n  const hangingPromise = new Promise<T>((_, reject) => {\n    signal.addEventListener(\n      'abort',\n      () => {\n        reject(\n          new Error(\n            `During prerendering, ${expression} rejects when the prerender is complete. Typically these errors are handled by React but if you move ${expression} to a different context by using \\`setTimeout\\`, \\`after\\`, or similar functions you may observe this error and you should handle it in that context.`\n          )\n        )\n      },\n      { once: true }\n    )\n  })\n  // We are fine if no one actually awaits this promise. We shouldn't consider this an unhandled rejection so\n  // we attach a noop catch handler here to suppress this warning. If you actually await somewhere or construct\n  // your own promise out of it you'll need to ensure you handle the error when it rejects.\n  hangingPromise.catch(ignoreReject)\n  return hangingPromise\n}\n\nfunction ignoreReject() {}\n", "export const METADATA_BOUNDARY_NAME = '__next_metadata_boundary__'\nexport const VIEWPORT_BOUNDARY_NAME = '__next_viewport_boundary__'\nexport const OUTLET_BOUNDARY_NAME = '__next_outlet_boundary__'\n", "/**\n * The functions provided by this module are used to communicate certain properties\n * about the currently running code so that Next.js can make decisions on how to handle\n * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.\n *\n * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.\n * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts\n * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of\n * Dynamic indications.\n *\n * The first is simply an intention to be dynamic. unstable_noStore is an example of this where\n * the currently executing code simply declares that the current scope is dynamic but if you use it\n * inside unstable_cache it can still be cached. This type of indication can be removed if we ever\n * make the default dynamic to begin with because the only way you would ever be static is inside\n * a cache scope which this indication does not affect.\n *\n * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic\n * because it means that it is inappropriate to cache this at all. using a dynamic data source inside\n * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should\n * read that data outside the cache and pass it in as an argument to the cached function.\n */\n\nimport type { WorkStore } from '../app-render/work-async-storage.external'\nimport type {\n  WorkUnitStore,\n  RequestStore,\n  PrerenderStoreLegacy,\n  PrerenderStoreModern,\n} from '../app-render/work-unit-async-storage.external'\n\n// Once postpone is in stable we should switch to importing the postpone export directly\nimport React from 'react'\n\nimport { DynamicServerError } from '../../client/components/hooks-server-context'\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout'\nimport { workUnitAsyncStorage } from './work-unit-async-storage.external'\nimport { workAsyncStorage } from '../app-render/work-async-storage.external'\nimport { makeHangingPromise } from '../dynamic-rendering-utils'\nimport {\n  METADATA_BOUNDARY_NAME,\n  VIEWPORT_BOUNDARY_NAME,\n  OUTLET_BOUNDARY_NAME,\n} from '../../lib/metadata/metadata-constants'\n\nconst hasPostpone = typeof React.unstable_postpone === 'function'\n\nexport type DynamicAccess = {\n  /**\n   * If debugging, this will contain the stack trace of where the dynamic access\n   * occurred. This is used to provide more information to the user about why\n   * their page is being rendered dynamically.\n   */\n  stack?: string\n\n  /**\n   * The expression that was accessed dynamically.\n   */\n  expression: string\n}\n\n// Stores dynamic reasons used during an RSC render.\nexport type DynamicTrackingState = {\n  /**\n   * When true, stack information will also be tracked during dynamic access.\n   */\n  readonly isDebugDynamicAccesses: boolean | undefined\n\n  /**\n   * The dynamic accesses that occurred during the render.\n   */\n  readonly dynamicAccesses: Array<DynamicAccess>\n\n  syncDynamicExpression: undefined | string\n  syncDynamicErrorWithStack: null | Error\n  // Dev only\n  syncDynamicLogged?: boolean\n}\n\n// Stores dynamic reasons used during an SSR render.\nexport type DynamicValidationState = {\n  hasSuspendedDynamic: boolean\n  hasDynamicMetadata: boolean\n  hasDynamicViewport: boolean\n  hasSyncDynamicErrors: boolean\n  dynamicErrors: Array<Error>\n}\n\nexport function createDynamicTrackingState(\n  isDebugDynamicAccesses: boolean | undefined\n): DynamicTrackingState {\n  return {\n    isDebugDynamicAccesses,\n    dynamicAccesses: [],\n    syncDynamicExpression: undefined,\n    syncDynamicErrorWithStack: null,\n  }\n}\n\nexport function createDynamicValidationState(): DynamicValidationState {\n  return {\n    hasSuspendedDynamic: false,\n    hasDynamicMetadata: false,\n    hasDynamicViewport: false,\n    hasSyncDynamicErrors: false,\n    dynamicErrors: [],\n  }\n}\n\nexport function getFirstDynamicReason(\n  trackingState: DynamicTrackingState\n): undefined | string {\n  return trackingState.dynamicAccesses[0]?.expression\n}\n\n/**\n * This function communicates that the current scope should be treated as dynamic.\n *\n * In most cases this function is a no-op but if called during\n * a PPR prerender it will postpone the current sub-tree and calling\n * it during a normal prerender will cause the entire prerender to abort\n */\nexport function markCurrentScopeAsDynamic(\n  store: WorkStore,\n  workUnitStore: undefined | Exclude<WorkUnitStore, PrerenderStoreModern>,\n  expression: string\n): void {\n  if (workUnitStore) {\n    if (\n      workUnitStore.type === 'cache' ||\n      workUnitStore.type === 'unstable-cache'\n    ) {\n      // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope\n      // creates a cache boundary. This is subtly different from reading a dynamic data source which is\n      // forbidden inside a cache scope.\n      return\n    }\n  }\n\n  // If we're forcing dynamic rendering or we're forcing static rendering, we\n  // don't need to do anything here because the entire page is already dynamic\n  // or it's static and it should not throw or postpone here.\n  if (store.forceDynamic || store.forceStatic) return\n\n  if (store.dynamicShouldError) {\n    throw new StaticGenBailoutError(\n      `Route ${store.route} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n    )\n  }\n\n  if (workUnitStore) {\n    if (workUnitStore.type === 'prerender-ppr') {\n      postponeWithTracking(\n        store.route,\n        expression,\n        workUnitStore.dynamicTracking\n      )\n    } else if (workUnitStore.type === 'prerender-legacy') {\n      workUnitStore.revalidate = 0\n\n      // We aren't prerendering but we are generating a static page. We need to bail out of static generation\n      const err = new DynamicServerError(\n        `Route ${store.route} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n      )\n      store.dynamicUsageDescription = expression\n      store.dynamicUsageStack = err.stack\n\n      throw err\n    } else if (\n      process.env.NODE_ENV === 'development' &&\n      workUnitStore &&\n      workUnitStore.type === 'request'\n    ) {\n      workUnitStore.usedDynamic = true\n    }\n  }\n}\n\n/**\n * This function communicates that some dynamic path parameter was read. This\n * differs from the more general `trackDynamicDataAccessed` in that it is will\n * not error when `dynamic = \"error\"` is set.\n *\n * @param store The static generation store\n * @param expression The expression that was accessed dynamically\n */\nexport function trackFallbackParamAccessed(\n  store: WorkStore,\n  expression: string\n): void {\n  const prerenderStore = workUnitAsyncStorage.getStore()\n  if (!prerenderStore || prerenderStore.type !== 'prerender-ppr') return\n\n  postponeWithTracking(store.route, expression, prerenderStore.dynamicTracking)\n}\n\n/**\n * This function is meant to be used when prerendering without dynamicIO or PPR.\n * When called during a build it will cause Next.js to consider the route as dynamic.\n *\n * @internal\n */\nexport function throwToInterruptStaticGeneration(\n  expression: string,\n  store: WorkStore,\n  prerenderStore: PrerenderStoreLegacy\n): never {\n  // We aren't prerendering but we are generating a static page. We need to bail out of static generation\n  const err = new DynamicServerError(\n    `Route ${store.route} couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n  )\n\n  prerenderStore.revalidate = 0\n\n  store.dynamicUsageDescription = expression\n  store.dynamicUsageStack = err.stack\n\n  throw err\n}\n\n/**\n * This function should be used to track whether something dynamic happened even when\n * we are in a dynamic render. This is useful for Dev where all renders are dynamic but\n * we still track whether dynamic APIs were accessed for helpful messaging\n *\n * @internal\n */\nexport function trackDynamicDataInDynamicRender(\n  _store: WorkStore,\n  workUnitStore: void | WorkUnitStore\n) {\n  if (workUnitStore) {\n    if (\n      workUnitStore.type === 'cache' ||\n      workUnitStore.type === 'unstable-cache'\n    ) {\n      // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope\n      // creates a cache boundary. This is subtly different from reading a dynamic data source which is\n      // forbidden inside a cache scope.\n      return\n    }\n    if (\n      workUnitStore.type === 'prerender' ||\n      workUnitStore.type === 'prerender-legacy'\n    ) {\n      workUnitStore.revalidate = 0\n    }\n    if (\n      process.env.NODE_ENV === 'development' &&\n      workUnitStore.type === 'request'\n    ) {\n      workUnitStore.usedDynamic = true\n    }\n  }\n}\n\n// Despite it's name we don't actually abort unless we have a controller to call abort on\n// There are times when we let a prerender run long to discover caches where we want the semantics\n// of tracking dynamic access without terminating the prerender early\nfunction abortOnSynchronousDynamicDataAccess(\n  route: string,\n  expression: string,\n  prerenderStore: PrerenderStoreModern\n): void {\n  const reason = `Route ${route} needs to bail out of prerendering at this point because it used ${expression}.`\n\n  const error = createPrerenderInterruptedError(reason)\n\n  prerenderStore.controller.abort(error)\n\n  const dynamicTracking = prerenderStore.dynamicTracking\n  if (dynamicTracking) {\n    dynamicTracking.dynamicAccesses.push({\n      // When we aren't debugging, we don't need to create another error for the\n      // stack trace.\n      stack: dynamicTracking.isDebugDynamicAccesses\n        ? new Error().stack\n        : undefined,\n      expression,\n    })\n  }\n}\n\nexport function abortOnSynchronousPlatformIOAccess(\n  route: string,\n  expression: string,\n  errorWithStack: Error,\n  prerenderStore: PrerenderStoreModern\n): void {\n  const dynamicTracking = prerenderStore.dynamicTracking\n  if (dynamicTracking) {\n    if (dynamicTracking.syncDynamicErrorWithStack === null) {\n      dynamicTracking.syncDynamicExpression = expression\n      dynamicTracking.syncDynamicErrorWithStack = errorWithStack\n    }\n  }\n  return abortOnSynchronousDynamicDataAccess(route, expression, prerenderStore)\n}\n\nexport function trackSynchronousPlatformIOAccessInDev(\n  requestStore: RequestStore\n): void {\n  // We don't actually have a controller to abort but we do the semantic equivalent by\n  // advancing the request store out of prerender mode\n  requestStore.prerenderPhase = false\n}\n\n/**\n * use this function when prerendering with dynamicIO. If we are doing a\n * prospective prerender we don't actually abort because we want to discover\n * all caches for the shell. If this is the actual prerender we do abort.\n *\n * This function accepts a prerenderStore but the caller should ensure we're\n * actually running in dynamicIO mode.\n *\n * @internal\n */\nexport function abortAndThrowOnSynchronousRequestDataAccess(\n  route: string,\n  expression: string,\n  errorWithStack: Error,\n  prerenderStore: PrerenderStoreModern\n): never {\n  const dynamicTracking = prerenderStore.dynamicTracking\n  if (dynamicTracking) {\n    if (dynamicTracking.syncDynamicErrorWithStack === null) {\n      dynamicTracking.syncDynamicExpression = expression\n      dynamicTracking.syncDynamicErrorWithStack = errorWithStack\n      if (prerenderStore.validating === true) {\n        // We always log Request Access in dev at the point of calling the function\n        // So we mark the dynamic validation as not requiring it to be printed\n        dynamicTracking.syncDynamicLogged = true\n      }\n    }\n  }\n  abortOnSynchronousDynamicDataAccess(route, expression, prerenderStore)\n  throw createPrerenderInterruptedError(\n    `Route ${route} needs to bail out of prerendering at this point because it used ${expression}.`\n  )\n}\n\n// For now these implementations are the same so we just reexport\nexport const trackSynchronousRequestDataAccessInDev =\n  trackSynchronousPlatformIOAccessInDev\n\n/**\n * This component will call `React.postpone` that throws the postponed error.\n */\ntype PostponeProps = {\n  reason: string\n  route: string\n}\nexport function Postpone({ reason, route }: PostponeProps): never {\n  const prerenderStore = workUnitAsyncStorage.getStore()\n  const dynamicTracking =\n    prerenderStore && prerenderStore.type === 'prerender-ppr'\n      ? prerenderStore.dynamicTracking\n      : null\n  postponeWithTracking(route, reason, dynamicTracking)\n}\n\nexport function postponeWithTracking(\n  route: string,\n  expression: string,\n  dynamicTracking: null | DynamicTrackingState\n): never {\n  assertPostpone()\n  if (dynamicTracking) {\n    dynamicTracking.dynamicAccesses.push({\n      // When we aren't debugging, we don't need to create another error for the\n      // stack trace.\n      stack: dynamicTracking.isDebugDynamicAccesses\n        ? new Error().stack\n        : undefined,\n      expression,\n    })\n  }\n\n  React.unstable_postpone(createPostponeReason(route, expression))\n}\n\nfunction createPostponeReason(route: string, expression: string) {\n  return (\n    `Route ${route} needs to bail out of prerendering at this point because it used ${expression}. ` +\n    `React throws this special object to indicate where. It should not be caught by ` +\n    `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`\n  )\n}\n\nexport function isDynamicPostpone(err: unknown) {\n  if (\n    typeof err === 'object' &&\n    err !== null &&\n    typeof (err as any).message === 'string'\n  ) {\n    return isDynamicPostponeReason((err as any).message)\n  }\n  return false\n}\n\nfunction isDynamicPostponeReason(reason: string) {\n  return (\n    reason.includes(\n      'needs to bail out of prerendering at this point because it used'\n    ) &&\n    reason.includes(\n      'Learn more: https://nextjs.org/docs/messages/ppr-caught-error'\n    )\n  )\n}\n\nif (isDynamicPostponeReason(createPostponeReason('%%%', '^^^')) === false) {\n  throw new Error(\n    'Invariant: isDynamicPostpone misidentified a postpone reason. This is a bug in Next.js'\n  )\n}\n\nconst NEXT_PRERENDER_INTERRUPTED = 'NEXT_PRERENDER_INTERRUPTED'\n\nfunction createPrerenderInterruptedError(message: string): Error {\n  const error = new Error(message)\n  ;(error as any).digest = NEXT_PRERENDER_INTERRUPTED\n  return error\n}\n\ntype DigestError = Error & {\n  digest: string\n}\n\nexport function isPrerenderInterruptedError(\n  error: unknown\n): error is DigestError {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    (error as any).digest === NEXT_PRERENDER_INTERRUPTED &&\n    'name' in error &&\n    'message' in error &&\n    error instanceof Error\n  )\n}\n\nexport function accessedDynamicData(\n  dynamicAccesses: Array<DynamicAccess>\n): boolean {\n  return dynamicAccesses.length > 0\n}\n\nexport function consumeDynamicAccess(\n  serverDynamic: DynamicTrackingState,\n  clientDynamic: DynamicTrackingState\n): DynamicTrackingState['dynamicAccesses'] {\n  // We mutate because we only call this once we are no longer writing\n  // to the dynamicTrackingState and it's more efficient than creating a new\n  // array.\n  serverDynamic.dynamicAccesses.push(...clientDynamic.dynamicAccesses)\n  return serverDynamic.dynamicAccesses\n}\n\nexport function formatDynamicAPIAccesses(\n  dynamicAccesses: Array<DynamicAccess>\n): string[] {\n  return dynamicAccesses\n    .filter(\n      (access): access is Required<DynamicAccess> =>\n        typeof access.stack === 'string' && access.stack.length > 0\n    )\n    .map(({ expression, stack }) => {\n      stack = stack\n        .split('\\n')\n        // Remove the \"Error: \" prefix from the first line of the stack trace as\n        // well as the first 4 lines of the stack trace which is the distance\n        // from the user code and the `new Error().stack` call.\n        .slice(4)\n        .filter((line) => {\n          // Exclude Next.js internals from the stack trace.\n          if (line.includes('node_modules/next/')) {\n            return false\n          }\n\n          // Exclude anonymous functions from the stack trace.\n          if (line.includes(' (<anonymous>)')) {\n            return false\n          }\n\n          // Exclude Node.js internals from the stack trace.\n          if (line.includes(' (node:')) {\n            return false\n          }\n\n          return true\n        })\n        .join('\\n')\n      return `Dynamic API Usage Debug - ${expression}:\\n${stack}`\n    })\n}\n\nfunction assertPostpone() {\n  if (!hasPostpone) {\n    throw new Error(\n      `Invariant: React.unstable_postpone is not defined. This suggests the wrong version of React was loaded. This is a bug in Next.js`\n    )\n  }\n}\n\n/**\n * This is a bit of a hack to allow us to abort a render using a Postpone instance instead of an Error which changes React's\n * abort semantics slightly.\n */\nexport function createPostponedAbortSignal(reason: string): AbortSignal {\n  assertPostpone()\n  const controller = new AbortController()\n  // We get our hands on a postpone instance by calling postpone and catching the throw\n  try {\n    React.unstable_postpone(reason)\n  } catch (x: unknown) {\n    controller.abort(x)\n  }\n  return controller.signal\n}\n\nexport function annotateDynamicAccess(\n  expression: string,\n  prerenderStore: PrerenderStoreModern\n) {\n  const dynamicTracking = prerenderStore.dynamicTracking\n  if (dynamicTracking) {\n    dynamicTracking.dynamicAccesses.push({\n      stack: dynamicTracking.isDebugDynamicAccesses\n        ? new Error().stack\n        : undefined,\n      expression,\n    })\n  }\n}\n\nexport function useDynamicRouteParams(expression: string) {\n  if (typeof window === 'undefined') {\n    const workStore = workAsyncStorage.getStore()\n\n    if (\n      workStore &&\n      workStore.isStaticGeneration &&\n      workStore.fallbackRouteParams &&\n      workStore.fallbackRouteParams.size > 0\n    ) {\n      // There are fallback route params, we should track these as dynamic\n      // accesses.\n      const workUnitStore = workUnitAsyncStorage.getStore()\n      if (workUnitStore) {\n        // We're prerendering with dynamicIO or PPR or both\n        if (workUnitStore.type === 'prerender') {\n          // We are in a prerender with dynamicIO semantics\n          // We are going to hang here and never resolve. This will cause the currently\n          // rendering component to effectively be a dynamic hole\n          React.use(makeHangingPromise(workUnitStore.renderSignal, expression))\n        } else if (workUnitStore.type === 'prerender-ppr') {\n          // We're prerendering with PPR\n          postponeWithTracking(\n            workStore.route,\n            expression,\n            workUnitStore.dynamicTracking\n          )\n        } else if (workUnitStore.type === 'prerender-legacy') {\n          throwToInterruptStaticGeneration(expression, workStore, workUnitStore)\n        }\n      }\n    }\n  }\n}\n\nconst hasSuspenseRegex = /\\n\\s+at Suspense \\(<anonymous>\\)/\nconst hasMetadataRegex = new RegExp(\n  `\\\\n\\\\s+at ${METADATA_BOUNDARY_NAME}[\\\\n\\\\s]`\n)\nconst hasViewportRegex = new RegExp(\n  `\\\\n\\\\s+at ${VIEWPORT_BOUNDARY_NAME}[\\\\n\\\\s]`\n)\nconst hasOutletRegex = new RegExp(`\\\\n\\\\s+at ${OUTLET_BOUNDARY_NAME}[\\\\n\\\\s]`)\n\nexport function trackAllowedDynamicAccess(\n  route: string,\n  componentStack: string,\n  dynamicValidation: DynamicValidationState,\n  serverDynamic: DynamicTrackingState,\n  clientDynamic: DynamicTrackingState\n) {\n  if (hasOutletRegex.test(componentStack)) {\n    // We don't need to track that this is dynamic. It is only so when something else is also dynamic.\n    return\n  } else if (hasMetadataRegex.test(componentStack)) {\n    dynamicValidation.hasDynamicMetadata = true\n    return\n  } else if (hasViewportRegex.test(componentStack)) {\n    dynamicValidation.hasDynamicViewport = true\n    return\n  } else if (hasSuspenseRegex.test(componentStack)) {\n    dynamicValidation.hasSuspendedDynamic = true\n    return\n  } else if (\n    serverDynamic.syncDynamicErrorWithStack ||\n    clientDynamic.syncDynamicErrorWithStack\n  ) {\n    dynamicValidation.hasSyncDynamicErrors = true\n    return\n  } else {\n    const message = `Route \"${route}\": A component accessed data, headers, params, searchParams, or a short-lived cache without a Suspense boundary nor a \"use cache\" above it. We don't have the exact line number added to error messages yet but you can see which component in the stack below. See more info: https://nextjs.org/docs/messages/next-prerender-missing-suspense`\n    const error = createErrorWithComponentStack(message, componentStack)\n    dynamicValidation.dynamicErrors.push(error)\n    return\n  }\n}\n\nfunction createErrorWithComponentStack(\n  message: string,\n  componentStack: string\n) {\n  const error = new Error(message)\n  error.stack = 'Error: ' + message + componentStack\n  return error\n}\n\nexport function throwIfDisallowedDynamic(\n  route: string,\n  dynamicValidation: DynamicValidationState,\n  serverDynamic: DynamicTrackingState,\n  clientDynamic: DynamicTrackingState\n): void {\n  let syncError: null | Error\n  let syncExpression: undefined | string\n  let syncLogged: boolean\n  if (serverDynamic.syncDynamicErrorWithStack) {\n    syncError = serverDynamic.syncDynamicErrorWithStack\n    syncExpression = serverDynamic.syncDynamicExpression!\n    syncLogged = serverDynamic.syncDynamicLogged === true\n  } else if (clientDynamic.syncDynamicErrorWithStack) {\n    syncError = clientDynamic.syncDynamicErrorWithStack\n    syncExpression = clientDynamic.syncDynamicExpression!\n    syncLogged = clientDynamic.syncDynamicLogged === true\n  } else {\n    syncError = null\n    syncExpression = undefined\n    syncLogged = false\n  }\n\n  if (dynamicValidation.hasSyncDynamicErrors && syncError) {\n    if (!syncLogged) {\n      // In dev we already log errors about sync dynamic access. But during builds we need to ensure\n      // the offending sync error is logged before we exit the build\n      console.error(syncError)\n    }\n    // The actual error should have been logged when the sync access ocurred\n    throw new StaticGenBailoutError()\n  }\n\n  const dynamicErrors = dynamicValidation.dynamicErrors\n  if (dynamicErrors.length) {\n    for (let i = 0; i < dynamicErrors.length; i++) {\n      console.error(dynamicErrors[i])\n    }\n\n    throw new StaticGenBailoutError()\n  }\n\n  if (!dynamicValidation.hasSuspendedDynamic) {\n    if (dynamicValidation.hasDynamicMetadata) {\n      if (syncError) {\n        console.error(syncError)\n        throw new StaticGenBailoutError(\n          `Route \"${route}\" has a \\`generateMetadata\\` that could not finish rendering before ${syncExpression} was used. Follow the instructions in the error for this expression to resolve.`\n        )\n      }\n      throw new StaticGenBailoutError(\n        `Route \"${route}\" has a \\`generateMetadata\\` that depends on Request data (\\`cookies()\\`, etc...) or external data (\\`fetch(...)\\`, etc...) but the rest of the route was static or only used cached data (\\`\"use cache\"\\`). If you expected this route to be prerenderable update your \\`generateMetadata\\` to not use Request data and only use cached external data. Otherwise, add \\`await connection()\\` somewhere within this route to indicate explicitly it should not be prerendered.`\n      )\n    } else if (dynamicValidation.hasDynamicViewport) {\n      if (syncError) {\n        console.error(syncError)\n        throw new StaticGenBailoutError(\n          `Route \"${route}\" has a \\`generateViewport\\` that could not finish rendering before ${syncExpression} was used. Follow the instructions in the error for this expression to resolve.`\n        )\n      }\n      throw new StaticGenBailoutError(\n        `Route \"${route}\" has a \\`generateViewport\\` that depends on Request data (\\`cookies()\\`, etc...) or external data (\\`fetch(...)\\`, etc...) but the rest of the route was static or only used cached data (\\`\"use cache\"\\`). If you expected this route to be prerenderable update your \\`generateViewport\\` to not use Request data and only use cached external data. Otherwise, add \\`await connection()\\` somewhere within this route to indicate explicitly it should not be prerendered.`\n      )\n    }\n  }\n}\n", "import { isDynamicServerError } from '../../client/components/hooks-server-context'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { isNextRouterError } from '../../client/components/is-next-router-error'\nimport { isDynamicPostpone } from '../../server/app-render/dynamic-rendering'\n\nexport const isDynamicUsageError = (err: unknown) =>\n  isDynamicServerError(err) ||\n  isBailoutToCSRError(err) ||\n  isNextRouterError(err) ||\n  isDynamicPostpone(err)\n", "const REACT_POSTPONE_TYPE: symbol = Symbol.for('react.postpone')\n\nexport function isPostpone(error: any): boolean {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    error.$$typeof === REACT_POSTPONE_TYPE\n  )\n}\n", "import { isDynamicUsageError } from '../../export/helpers/is-dynamic-usage-error'\nimport { isPostpone } from '../../server/lib/router-utils/is-postpone'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { isNextRouterError } from './is-next-router-error'\n\n/**\n * This function should be used to rethrow internal Next.js errors so that they can be handled by the framework.\n * When wrapping an API that uses errors to interrupt control flow, you should use this function before you do any error handling.\n * This function will rethrow the error if it is a Next.js error so it can be handled, otherwise it will do nothing.\n *\n * Read more: [Next.js Docs: `unstable_rethrow`](https://nextjs.org/docs/app/api-reference/functions/unstable_rethrow)\n */\nexport function unstable_rethrow(error: unknown): void {\n  if (\n    isNextRouterError(error) ||\n    isBailoutToCSRError(error) ||\n    isDynamicUsageError(error) ||\n    isPostpone(error)\n  ) {\n    throw error\n  }\n\n  if (error instanceof Error && 'cause' in error) {\n    unstable_rethrow(error.cause)\n  }\n}\n", "/** @internal */\nclass ReadonlyURLSearchParamsError extends Error {\n  constructor() {\n    super(\n      'Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams'\n    )\n  }\n}\n\nclass ReadonlyURLSearchParams extends URLSearchParams {\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  append() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  delete() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  set() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  sort() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n}\n\nexport { redirect, permanentRedirect } from './redirect'\nexport { RedirectType } from './redirect-error'\nexport { notFound } from './not-found'\nexport { forbidden } from './forbidden'\nexport { unauthorized } from './unauthorized'\nexport { unstable_rethrow } from './unstable-rethrow'\nexport { ReadonlyURLSearchParams }\n", "'use client'\n\nimport React, { useContext } from 'react'\n\nexport type ServerInsertedHTMLHook = (callbacks: () => React.ReactNode) => void\n\n// Use `React.createContext` to avoid errors from the RSC checks because\n// it can't be imported directly in Server Components:\n//\n//   import { createContext } from 'react'\n//\n// More info: https://github.com/vercel/next.js/pull/40686\nexport const ServerInsertedHTMLContext =\n  React.createContext<ServerInsertedHTMLHook | null>(null as any)\n\nexport function useServerInsertedHTML(callback: () => React.ReactNode): void {\n  const addInsertedServerHTMLCallback = useContext(ServerInsertedHTMLContext)\n  // Should have no effects on client where there's no flush effects provider\n  if (addInsertedServerHTMLCallback) {\n    addInsertedServerHTMLCallback(callback)\n  }\n}\n", "import { BailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { workAsyncStorage } from '../../server/app-render/work-async-storage.external'\n\nexport function bailoutToClientRendering(reason: string): void | never {\n  const workStore = workAsyncStorage.getStore()\n\n  if (workStore?.forceStatic) return\n\n  if (workStore?.isStaticGeneration) throw new BailoutToCSRError(reason)\n}\n", "import type { FlightRouterState } from '../../server/app-render/types'\nimport type { Params } from '../../server/request/params'\n\nimport { useContext, useMemo } from 'react'\nimport {\n  AppRouterContext,\n  LayoutRouterContext,\n  type AppRouterInstance,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport {\n  SearchParamsContext,\n  PathnameContext,\n  PathParamsContext,\n} from '../../shared/lib/hooks-client-context.shared-runtime'\nimport { getSegmentValue } from './router-reducer/reducers/get-segment-value'\nimport { PAGE_SEGMENT_KEY, DEFAULT_SEGMENT_KEY } from '../../shared/lib/segment'\nimport { ReadonlyURLSearchParams } from './navigation.react-server'\nimport { useDynamicRouteParams } from '../../server/app-render/dynamic-rendering'\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you *read* the current URL's search parameters.\n *\n * Learn more about [`URLSearchParams` on MDN](https://developer.mozilla.org/docs/Web/API/URLSearchParams)\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useSearchParams } from 'next/navigation'\n *\n * export default function Page() {\n *   const searchParams = useSearchParams()\n *   searchParams.get('foo') // returns 'bar' when ?foo=bar\n *   // ...\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSearchParams`](https://nextjs.org/docs/app/api-reference/functions/use-search-params)\n */\n// Client components API\nexport function useSearchParams(): ReadonlyURLSearchParams {\n  const searchParams = useContext(SearchParamsContext)\n\n  // In the case where this is `null`, the compat types added in\n  // `next-env.d.ts` will add a new overload that changes the return type to\n  // include `null`.\n  const readonlySearchParams = useMemo(() => {\n    if (!searchParams) {\n      // When the router is not ready in pages, we won't have the search params\n      // available.\n      return null\n    }\n\n    return new ReadonlyURLSearchParams(searchParams)\n  }, [searchParams]) as ReadonlyURLSearchParams\n\n  if (typeof window === 'undefined') {\n    // AsyncLocalStorage should not be included in the client bundle.\n    const { bailoutToClientRendering } =\n      require('./bailout-to-client-rendering') as typeof import('./bailout-to-client-rendering')\n    // TODO-APP: handle dynamic = 'force-static' here and on the client\n    bailoutToClientRendering('useSearchParams()')\n  }\n\n  return readonlySearchParams\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the current URL's pathname.\n *\n * @example\n * ```ts\n * \"use client\"\n * import { usePathname } from 'next/navigation'\n *\n * export default function Page() {\n *  const pathname = usePathname() // returns \"/dashboard\" on /dashboard?foo=bar\n *  // ...\n * }\n * ```\n *\n * Read more: [Next.js Docs: `usePathname`](https://nextjs.org/docs/app/api-reference/functions/use-pathname)\n */\n// Client components API\nexport function usePathname(): string {\n  useDynamicRouteParams('usePathname()')\n\n  // In the case where this is `null`, the compat types added in `next-env.d.ts`\n  // will add a new overload that changes the return type to include `null`.\n  return useContext(PathnameContext) as string\n}\n\n// Client components API\nexport {\n  ServerInsertedHTMLContext,\n  useServerInsertedHTML,\n} from '../../shared/lib/server-inserted-html.shared-runtime'\n\n/**\n *\n * This hook allows you to programmatically change routes inside [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components).\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useRouter } from 'next/navigation'\n *\n * export default function Page() {\n *  const router = useRouter()\n *  // ...\n *  router.push('/dashboard') // Navigate to /dashboard\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useRouter`](https://nextjs.org/docs/app/api-reference/functions/use-router)\n */\n// Client components API\nexport function useRouter(): AppRouterInstance {\n  const router = useContext(AppRouterContext)\n  if (router === null) {\n    throw new Error('invariant expected app router to be mounted')\n  }\n\n  return router\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read a route's dynamic params filled in by the current URL.\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useParams } from 'next/navigation'\n *\n * export default function Page() {\n *   // on /dashboard/[team] where pathname is /dashboard/nextjs\n *   const { team } = useParams() // team === \"nextjs\"\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useParams`](https://nextjs.org/docs/app/api-reference/functions/use-params)\n */\n// Client components API\nexport function useParams<T extends Params = Params>(): T {\n  useDynamicRouteParams('useParams()')\n\n  return useContext(PathParamsContext) as T\n}\n\n/** Get the canonical parameters from the current level to the leaf node. */\n// Client components API\nfunction getSelectedLayoutSegmentPath(\n  tree: FlightRouterState,\n  parallelRouteKey: string,\n  first = true,\n  segmentPath: string[] = []\n): string[] {\n  let node: FlightRouterState\n  if (first) {\n    // Use the provided parallel route key on the first parallel route\n    node = tree[1][parallelRouteKey]\n  } else {\n    // After first parallel route prefer children, if there's no children pick the first parallel route.\n    const parallelRoutes = tree[1]\n    node = parallelRoutes.children ?? Object.values(parallelRoutes)[0]\n  }\n\n  if (!node) return segmentPath\n  const segment = node[0]\n\n  let segmentValue = getSegmentValue(segment)\n\n  if (!segmentValue || segmentValue.startsWith(PAGE_SEGMENT_KEY)) {\n    return segmentPath\n  }\n\n  segmentPath.push(segmentValue)\n\n  return getSelectedLayoutSegmentPath(\n    node,\n    parallelRouteKey,\n    false,\n    segmentPath\n  )\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the active route segments **below** the Layout it is called from.\n *\n * @example\n * ```ts\n * 'use client'\n *\n * import { useSelectedLayoutSegments } from 'next/navigation'\n *\n * export default function ExampleClientComponent() {\n *   const segments = useSelectedLayoutSegments()\n *\n *   return (\n *     <ul>\n *       {segments.map((segment, index) => (\n *         <li key={index}>{segment}</li>\n *       ))}\n *     </ul>\n *   )\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSelectedLayoutSegments`](https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segments)\n */\n// Client components API\nexport function useSelectedLayoutSegments(\n  parallelRouteKey: string = 'children'\n): string[] {\n  useDynamicRouteParams('useSelectedLayoutSegments()')\n\n  const context = useContext(LayoutRouterContext)\n  // @ts-expect-error This only happens in `pages`. Type is overwritten in navigation.d.ts\n  if (!context) return null\n\n  return getSelectedLayoutSegmentPath(context.tree, parallelRouteKey)\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the active route segment **one level below** the Layout it is called from.\n *\n * @example\n * ```ts\n * 'use client'\n * import { useSelectedLayoutSegment } from 'next/navigation'\n *\n * export default function ExampleClientComponent() {\n *   const segment = useSelectedLayoutSegment()\n *\n *   return <p>Active segment: {segment}</p>\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSelectedLayoutSegment`](https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segment)\n */\n// Client components API\nexport function useSelectedLayoutSegment(\n  parallelRouteKey: string = 'children'\n): string | null {\n  useDynamicRouteParams('useSelectedLayoutSegment()')\n\n  const selectedLayoutSegments = useSelectedLayoutSegments(parallelRouteKey)\n\n  if (!selectedLayoutSegments || selectedLayoutSegments.length === 0) {\n    return null\n  }\n\n  const selectedLayoutSegment =\n    parallelRouteKey === 'children'\n      ? selectedLayoutSegments[0]\n      : selectedLayoutSegments[selectedLayoutSegments.length - 1]\n\n  // if the default slot is showing, we return null since it's not technically \"selected\" (it's a fallback)\n  // and returning an internal value like `__DEFAULT__` would be confusing.\n  return selectedLayoutSegment === DEFAULT_SEGMENT_KEY\n    ? null\n    : selectedLayoutSegment\n}\n\n// Shared components APIs\nexport {\n  notFound,\n  forbidden,\n  unauthorized,\n  redirect,\n  permanentRedirect,\n  RedirectType,\n  ReadonlyURLSearchParams,\n  unstable_rethrow,\n} from './navigation.react-server'\n", "module.exports = require('./dist/client/components/navigation')\n"],
  "mappings": "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",
  "names": ["AppRouterContext", "GlobalLayoutRouterContext", "LayoutRouterContext", "MissingSlotContext", "TemplateContext", "React", "createContext", "process", "displayName", "Set", "PathParamsContext", "PathnameContext", "SearchParamsContext", "createContext", "process", "displayName", "getSegmentValue", "segment", "Array", "isArray", "bindSnapshot", "createAsyncLocalStorage", "createSnapshot", "sharedAsyncLocalStorageNotAvailableError", "Error", "FakeAsyncLocalStorage", "disable", "getStore", "undefined", "run", "exit", "enterWith", "bind", "fn", "maybeGlobalAsyncLocalStorage", "globalThis", "AsyncLocalStorage", "snapshot", "args", "actionAsyncStorageInstance", "createAsyncLocalStorage", "actionAsyncStorage", "actionAsyncStorageInstance", "RedirectStatusCode", "REDIRECT_ERROR_CODE", "RedirectType", "isRedirectError", "error", "digest", "split", "errorCode", "type", "destination", "slice", "join", "status", "at", "statusCode", "Number", "isNaN", "RedirectStatusCode", "getRedirectError", "getRedirectStatusCodeFromError", "getRedirectTypeFromError", "getURLFromRedirectError", "permanentRedirect", "redirect", "url", "type", "statusCode", "RedirectStatusCode", "TemporaryRedirect", "error", "Error", "REDIRECT_ERROR_CODE", "digest", "actionStore", "actionAsyncStorage", "getStore", "redirectType", "isAction", "RedirectType", "push", "replace", "PermanentRedirect", "isRedirectError", "split", "slice", "join", "Number", "at", "HTTPAccessErrorStatus", "HTTP_ERROR_FALLBACK_ERROR_CODE", "getAccessFallbackErrorTypeByStatus", "getAccessFallbackHTTPStatus", "isHTTPAccessFallbackError", "NOT_FOUND", "FORBIDDEN", "UNAUTHORIZED", "ALLOWED_CODES", "Set", "Object", "values", "error", "digest", "prefix", "httpStatus", "split", "has", "Number", "status", "notFound", "DIGEST", "HTTP_ERROR_FALLBACK_ERROR_CODE", "error", "Error", "digest", "forbidden", "DIGEST", "HTTP_ERROR_FALLBACK_ERROR_CODE", "process", "env", "__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS", "Error", "error", "digest", "unauthorized", "DIGEST", "HTTP_ERROR_FALLBACK_ERROR_CODE", "process", "env", "__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS", "Error", "error", "digest", "DynamicServerError", "isDynamicServerError", "DYNAMIC_ERROR_CODE", "Error", "constructor", "description", "digest", "err", "BailoutToCSRError", "isBailoutToCSRError", "BAILOUT_TO_CSR", "Error", "constructor", "reason", "digest", "err", "isNextRouterError", "error", "isRedirectError", "isHTTPAccessFallbackError", "StaticGenBailoutError", "isStaticGenBailoutError", "NEXT_STATIC_GEN_BAILOUT", "Error", "code", "error", "workUnitAsyncStorageInstance", "createAsyncLocalStorage", "getExpectedRequestStore", "getPrerenderResumeDataCache", "getRenderResumeDataCache", "workUnitAsyncStorage", "workUnitAsyncStorageInstance", "callingExpression", "workUnitStore", "getStore", "type", "Error", "prerenderResumeDataCache", "renderResumeDataCache", "workAsyncStorageInstance", "createAsyncLocalStorage", "workAsyncStorage", "workAsyncStorageInstance", "makeHangingPromise", "signal", "expression", "hangingPromise", "Promise", "_", "reject", "addEventListener", "Error", "once", "catch", "ignoreReject", "METADATA_BOUNDARY_NAME", "OUTLET_BOUNDARY_NAME", "VIEWPORT_BOUNDARY_NAME", "Postpone", "abortAndThrowOnSynchronousRequestDataAccess", "abortOnSynchronousPlatformIOAccess", "accessedDynamicData", "annotateDynamicAccess", "consumeDynamicAccess", "createDynamicTrackingState", "createDynamicValidationState", "createPostponedAbortSignal", "formatDynamicAPIAccesses", "getFirstDynamicReason", "isDynamicPostpone", "isPrerenderInterruptedError", "markCurrentScopeAsDynamic", "postponeWithTracking", "throwIfDisallowedDynamic", "throwToInterruptStaticGeneration", "trackAllowedDynamicAccess", "trackDynamicDataInDynamicRender", "trackFallbackParamAccessed", "trackSynchronousPlatformIOAccessInDev", "trackSynchronousRequestDataAccessInDev", "useDynamicRouteParams", "hasPostpone", "React", "unstable_postpone", "isDebugDynamicAccesses", "dynamicAccesses", "syncDynamicExpression", "undefined", "syncDynamicErrorWithStack", "hasSuspendedDynamic", "hasDynamicMetadata", "hasDynamicViewport", "hasSyncDynamicErrors", "dynamicErrors", "trackingState", "expression", "store", "workUnitStore", "type", "forceDynamic", "forceStatic", "dynamicShouldError", "StaticGenBailoutError", "route", "dynamicTracking", "revalidate", "err", "DynamicServerError", "dynamicUsageDescription", "dynamicUsageStack", "stack", "usedDynamic", "prerenderStore", "workUnitAsyncStorage", "getStore", "_store", "abortOnSynchronousDynamicDataAccess", "reason", "error", "createPrerenderInterruptedError", "controller", "abort", "push", "Error", "errorWithStack", "requestStore", "prerenderPhase", "validating", "syncDynamicLogged", "assertPostpone", "createPostponeReason", "message", "isDynamicPostponeReason", "includes", "NEXT_PRERENDER_INTERRUPTED", "digest", "length", "serverDynamic", "clientDynamic", "filter", "access", "map", "split", "slice", "line", "join", "AbortController", "x", "signal", "window", "workStore", "workAsyncStorage", "isStaticGeneration", "fallbackRouteParams", "size", "use", "makeHangingPromise", "renderSignal", "hasSuspenseRegex", "hasMetadataRegex", "RegExp", "METADATA_BOUNDARY_NAME", "hasViewportRegex", "VIEWPORT_BOUNDARY_NAME", "hasOutletRegex", "OUTLET_BOUNDARY_NAME", "componentStack", "dynamicValidation", "test", "createErrorWithComponentStack", "syncError", "syncExpression", "syncLogged", "console", "i", "isDynamicUsageError", "err", "isDynamicServerError", "isBailoutToCSRError", "isNextRouterError", "isDynamicPostpone", "isPostpone", "REACT_POSTPONE_TYPE", "Symbol", "for", "error", "$$typeof", "unstable_rethrow", "error", "isNextRouterError", "isBailoutToCSRError", "isDynamicUsageError", "isPostpone", "Error", "cause", "ReadonlyURLSearchParams", "RedirectType", "forbidden", "notFound", "permanentRedirect", "redirect", "unauthorized", "unstable_rethrow", "ReadonlyURLSearchParamsError", "Error", "constructor", "URLSearchParams", "append", "delete", "set", "sort", "ServerInsertedHTMLContext", "useServerInsertedHTML", "React", "createContext", "callback", "addInsertedServerHTMLCallback", "useContext", "bailoutToClientRendering", "reason", "workStore", "workAsyncStorage", "getStore", "forceStatic", "isStaticGeneration", "BailoutToCSRError", "ReadonlyURLSearchParams", "RedirectType", "ServerInsertedHTMLContext", "forbidden", "notFound", "permanentRedirect", "redirect", "unauthorized", "unstable_rethrow", "useParams", "usePathname", "useRouter", "useSearchParams", "useSelectedLayoutSegment", "useSelectedLayoutSegments", "useServerInsertedHTML", "searchParams", "useContext", "SearchParamsContext", "readonlySearchParams", "useMemo", "window", "bailoutToClientRendering", "require", "useDynamicRouteParams", "PathnameContext", "router", "AppRouterContext", "Error", "PathParamsContext", "getSelectedLayoutSegmentPath", "tree", "parallelRouteKey", "first", "segmentPath", "node", "parallelRoutes", "children", "Object", "values", "segment", "segmentValue", "getSegmentValue", "startsWith", "PAGE_SEGMENT_KEY", "push", "context", "LayoutRouterContext", "selectedLayoutSegments", "length", "selectedLayoutSegment", "DEFAULT_SEGMENT_KEY", "require_navigation"]
}
